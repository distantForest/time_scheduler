
period_counter_test_system.elf:     file format elf32-littlenios2
period_counter_test_system.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002180

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x0000080c memsz 0x0000080c flags r-x
    LOAD off    0x0000182c vaddr 0x0000282c paddr 0x00002848 align 2**12
         filesz 0x0000001c memsz 0x0000001c flags rw-
    LOAD off    0x00001864 vaddr 0x00002864 paddr 0x00002864 align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000062c  00002180  00002180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000080  000027ac  000027ac  000017ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000001c  0000282c  00002848  0000182c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  00002864  00002864  00001864  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00002980  00002980  00001848  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002b8  00000000  00000000  00001870  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001a6e  00000000  00000000  00001b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000e66  00000000  00000000  00003596  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000dcc  00000000  00000000  000043fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000338  00000000  00000000  000051c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000d08  00000000  00000000  00005500  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000749  00000000  00000000  00006208  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00006954  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000128  00000000  00000000  00006968  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00007bf6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00007bf9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00007c05  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00007c06  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00007c07  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00007c12  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00007c1d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000e  00000000  00000000  00007c28  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000045  00000000  00000000  00007c36  2**0
                  CONTENTS, READONLY
 26 .jdi          000000e3  00000000  00000000  00007c7b  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00032b92  00000000  00000000  00007d5e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .exceptions	00000000 .exceptions
00002180 l    d  .text	00000000 .text
000027ac l    d  .rodata	00000000 .rodata
0000282c l    d  .rwdata	00000000 .rwdata
00002864 l    d  .bss	00000000 .bss
00002980 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../period_counter_test_system_bsp/obj/HAL/src/crt0.o
000021b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 period_counter_test_system.c
00002864 l     O .bss	00000004 j.1831
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
0000287c g     O .bss	00000004 alt_instruction_exception_handler
00002498 g     F .text	0000002c alt_main
00002880 g     O .bss	00000100 alt_irq
00002848 g       *ABS*	00000000 __flash_rwdata_start
000021bc g     F .text	00000014 p_function0
0000267c g     F .text	00000038 alt_putstr
00002788 g     F .text	00000008 altera_nios2_gen2_irq_init
00002000 g     F .entry	0000000c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
0000282c g     O .rwdata	00000014 period_functions
00002874 g     O .bss	00000004 alt_argv
0000a840 g       *ABS*	00000000 _gp
000021e4 g     F .text	00000064 alt_isr_period_0
00002714 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00002000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00002980 g       *ABS*	00000000 __bss_end
00002350 g     F .text	00000068 alt_iic_isr_register
00002338 g     F .text	00000018 alt_ic_irq_enabled
0000286c g     O .bss	00000004 alt_irq_active
000020fc g     F .exceptions	00000060 alt_irq_handler
0000270c g     F .text	00000004 alt_dcache_flush_all
00002848 g       *ABS*	00000000 __ram_rwdata_end
0000282c g       *ABS*	00000000 __ram_rodata_end
00002844 g     O .rwdata	00000004 jtag_uart_0
00002980 g       *ABS*	00000000 end
0000215c g     F .exceptions	00000024 alt_instruction_exception_entry
00004000 g       *ABS*	00000000 __alt_stack_pointer
000026d8 g     F .text	00000034 altera_avalon_jtag_uart_write
000024c4 g     F .text	00000170 alt_printf
00002180 g     F .text	0000003c _start
000026d4 g     F .text	00000004 alt_sys_init
0000282c g       *ABS*	00000000 __ram_rwdata_start
000027ac g       *ABS*	00000000 __ram_rodata_start
00002980 g       *ABS*	00000000 __alt_stack_base
00002864 g       *ABS*	00000000 __bss_start
00002248 g     F .text	0000007c main
00002870 g     O .bss	00000004 alt_envp
00002868 g     O .bss	00000004 period_0_data
000027ac g       *ABS*	00000000 __flash_rodata_start
000026b4 g     F .text	00000020 alt_irq_init
00002878 g     O .bss	00000004 alt_argc
00002020 g       .exceptions	00000000 alt_irq_entry
00002020 g       *ABS*	00000000 __ram_exceptions_start
000022c4 g     F .text	00000004 alt_ic_isr_register
00002848 g       *ABS*	00000000 _edata
00002980 g       *ABS*	00000000 _end
00002180 g       *ABS*	00000000 __ram_exceptions_end
000021d0 g     F .text	00000014 p_function2
00002300 g     F .text	00000038 alt_ic_irq_disable
00004000 g       *ABS*	00000000 __alt_data_end
00002020 g     F .exceptions	00000000 alt_exception
0000200c g       .entry	00000000 _exit
00002790 g     F .text	0000001c strlen
00002634 g     F .text	00000048 alt_putchar
00002710 g     F .text	00000004 alt_icache_flush_all
00002840 g     O .rwdata	00000004 alt_priority_mask
000022c8 g     F .text	00000038 alt_ic_irq_enable
000023b8 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08486014 	ori	at,at,8576
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .exceptions:

00002020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    2020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    2024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    2028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    202c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    2030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    2034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    2038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    203c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    2040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    2044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    2048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    204c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    2050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    2054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    2058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    205c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    2060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    2064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    2068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    206c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    2070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    2074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    2078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    207c:	10000326 	beq	r2,zero,208c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    2080:	20000226 	beq	r4,zero,208c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    2084:	00020fc0 	call	20fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    2088:	00000706 	br	20a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    208c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    2090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    2094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    2098:	000215c0 	call	215c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    209c:	1000021e 	bne	r2,zero,20a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    20a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    20a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    20a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    20ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    20b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    20b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    20b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    20bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    20c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    20c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    20c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    20cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    20d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    20d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    20d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    20dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    20e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    20e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    20e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    20ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    20f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    20f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    20f8:	ef80083a 	eret

000020fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    20fc:	defffe04 	addi	sp,sp,-8
    2100:	dfc00115 	stw	ra,4(sp)
    2104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    2108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    210c:	04000034 	movhi	r16,0
    2110:	840a2004 	addi	r16,r16,10368

  active = alt_irq_pending ();

  do
  {
    i = 0;
    2114:	0005883a 	mov	r2,zero
    mask = 1;
    2118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    211c:	20ca703a 	and	r5,r4,r3
    2120:	28000b26 	beq	r5,zero,2150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    2124:	100490fa 	slli	r2,r2,3
    2128:	8085883a 	add	r2,r16,r2
    212c:	10c00017 	ldw	r3,0(r2)
    2130:	11000117 	ldw	r4,4(r2)
    2134:	183ee83a 	callr	r3
    2138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    213c:	203ff51e 	bne	r4,zero,2114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    2140:	dfc00117 	ldw	ra,4(sp)
    2144:	dc000017 	ldw	r16,0(sp)
    2148:	dec00204 	addi	sp,sp,8
    214c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    2150:	18c7883a 	add	r3,r3,r3
      i++;
    2154:	10800044 	addi	r2,r2,1

    } while (1);
    2158:	003ff006 	br	211c <alt_irq_handler+0x20>

0000215c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    215c:	d0a00f17 	ldw	r2,-32708(gp)
    2160:	10000426 	beq	r2,zero,2174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    2164:	200b883a 	mov	r5,r4
    2168:	000d883a 	mov	r6,zero
    216c:	013fffc4 	movi	r4,-1
    2170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    2174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    2178:	0005883a 	mov	r2,zero
    217c:	f800283a 	ret

Disassembly of section .text:

00002180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2184:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
    2188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    218c:	d6aa1014 	ori	gp,gp,43072
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2194:	108a1914 	ori	r2,r2,10340

    movhi r3, %hi(__bss_end)
    2198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    219c:	18ca6014 	ori	r3,r3,10624

    beq r2, r3, 1f
    21a0:	10c00326 	beq	r2,r3,21b0 <_start+0x30>

0:
    stw zero, (r2)
    21a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    21a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    21ac:	10fffd36 	bltu	r2,r3,21a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    21b0:	00023b80 	call	23b8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    21b4:	00024980 	call	2498 <alt_main>

000021b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    21b8:	003fff06 	br	21b8 <alt_after_alt_main>

000021bc <p_function0>:
	IORD_32DIRECT(TIME_SCHEDULER_0_BASE, \
			PERIOD_0_INTERRUPT_ENABLE_REG))

//period functions
void p_function0(void){
	alt_printf("++function 0 %x ++\n",PERIOD_READ_IRQ_ENABLE_REG);
    21bc:	00940004 	movi	r2,20480
    21c0:	11400037 	ldwio	r5,0(r2)
    21c4:	01000034 	movhi	r4,0
    21c8:	2109eb04 	addi	r4,r4,10156
    21cc:	00024c41 	jmpi	24c4 <alt_printf>

000021d0 <p_function2>:
}

void p_function2(void){
	alt_printf("**function 2 %x **\n",PERIOD_READ_IRQ_ENABLE_REG);
    21d0:	00940004 	movi	r2,20480
    21d4:	11400037 	ldwio	r5,0(r2)
    21d8:	01000034 	movhi	r4,0
    21dc:	2109f004 	addi	r4,r4,10176
    21e0:	00024c41 	jmpi	24c4 <alt_printf>

000021e4 <alt_isr_period_0>:
}

void (*period_functions[5])(void) = {p_function0,0,p_function2,0,0};

void alt_isr_period_0 (void* isr_context){
    21e4:	defffe04 	addi	sp,sp,-8
	unsigned vector = TIME_SCHEDULER_VECTOR_READ;
    21e8:	00940204 	movi	r2,20488
	alt_printf("**function 2 %x **\n",PERIOD_READ_IRQ_ENABLE_REG);
}

void (*period_functions[5])(void) = {p_function0,0,p_function2,0,0};

void alt_isr_period_0 (void* isr_context){
    21ec:	dfc00115 	stw	ra,4(sp)
    21f0:	dc000015 	stw	r16,0(sp)
	unsigned vector = TIME_SCHEDULER_VECTOR_READ;
    21f4:	14000037 	ldwio	r16,0(r2)

	TIME_SCHEDULER_IRQ_CLEAR;
    21f8:	10000035 	stwio	zero,0(r2)
	*(unsigned*)isr_context = (*(unsigned*)isr_context + 1) & 0xf;
    21fc:	20800017 	ldw	r2,0(r4)
//	alt_printf("Period %x done %x\n", vector, *(unsigned*)isr_context);

	// call period function by vector
	period_functions[vector]();
    2200:	00c00034 	movhi	r3,0
    2204:	18ca0b04 	addi	r3,r3,10284

void alt_isr_period_0 (void* isr_context){
	unsigned vector = TIME_SCHEDULER_VECTOR_READ;

	TIME_SCHEDULER_IRQ_CLEAR;
	*(unsigned*)isr_context = (*(unsigned*)isr_context + 1) & 0xf;
    2208:	10800044 	addi	r2,r2,1
    220c:	108003cc 	andi	r2,r2,15
    2210:	20800015 	stw	r2,0(r4)
//	alt_printf("Period %x done %x\n", vector, *(unsigned*)isr_context);

	// call period function by vector
	period_functions[vector]();
    2214:	8405883a 	add	r2,r16,r16
    2218:	1085883a 	add	r2,r2,r2
    221c:	1885883a 	add	r2,r3,r2
    2220:	10800017 	ldw	r2,0(r2)
    2224:	103ee83a 	callr	r2
	PERIOD_X_IRQ_CLEAR(1 << vector);
    2228:	00800044 	movi	r2,1
    222c:	1404983a 	sll	r2,r2,r16
    2230:	00d40104 	movi	r3,20484
    2234:	18800035 	stwio	r2,0(r3)
}
    2238:	dfc00117 	ldw	ra,4(sp)
    223c:	dc000017 	ldw	r16,0(sp)
    2240:	dec00204 	addi	sp,sp,8
    2244:	f800283a 	ret

00002248 <main>:

unsigned period_0_data = 0;
int main()
{
  alt_putstr("Hello from Nios II! multichannel\n");
    2248:	01000034 	movhi	r4,0
	PERIOD_X_IRQ_CLEAR(1 << vector);
}

unsigned period_0_data = 0;
int main()
{
    224c:	defffe04 	addi	sp,sp,-8
  alt_putstr("Hello from Nios II! multichannel\n");
    2250:	2109f504 	addi	r4,r4,10196
	PERIOD_X_IRQ_CLEAR(1 << vector);
}

unsigned period_0_data = 0;
int main()
{
    2254:	dfc00115 	stw	ra,4(sp)
  alt_putstr("Hello from Nios II! multichannel\n");
    2258:	000267c0 	call	267c <alt_putstr>
  if (alt_ic_isr_register(
    225c:	01800034 	movhi	r6,0
    2260:	d8000015 	stw	zero,0(sp)
    2264:	d1e00a04 	addi	r7,gp,-32728
    2268:	31887904 	addi	r6,r6,8676
    226c:	000b883a 	mov	r5,zero
    2270:	0009883a 	mov	r4,zero
    2274:	00022c40 	call	22c4 <alt_ic_isr_register>
    2278:	10000326 	beq	r2,zero,2288 <main+0x40>
		  TIME_SCHEDULER_0_IRQ,
		  alt_isr_period_0,
		  &period_0_data,
		  0x0
		  )){
	  alt_printf("Error ISR register period 0");
    227c:	01000034 	movhi	r4,0
    2280:	2109fe04 	addi	r4,r4,10232
    2284:	00024c40 	call	24c4 <alt_printf>
  }

  PERIOD_2_IRQ_ENABLE;
    2288:	00940004 	movi	r2,20480
    228c:	00c00144 	movi	r3,5
    2290:	10c00035 	stwio	r3,0(r2)
	PERIOD_X_IRQ_CLEAR(1 << vector);
}

unsigned period_0_data = 0;
int main()
{
    2294:	00801734 	movhi	r2,92
    2298:	10a36004 	addi	r2,r2,-29312
    229c:	10bfffc4 	addi	r2,r2,-1
  PERIOD_2_IRQ_ENABLE;
  /* Event loop never exits. */
  while (1){
	  static int j = 0;
//	  delay and print background loop message
	  for (int i = HUGE_DELAY; i > 0; i --){
    22a0:	103ffe1e 	bne	r2,zero,229c <main+0x54>
		  int j = i;
	  }
	  alt_printf("-- background -- %x\n", j++ & 0xff);
    22a4:	d1600917 	ldw	r5,-32732(gp)
    22a8:	01000034 	movhi	r4,0
    22ac:	210a0504 	addi	r4,r4,10260
    22b0:	28800044 	addi	r2,r5,1
    22b4:	29403fcc 	andi	r5,r5,255
    22b8:	d0a00915 	stw	r2,-32732(gp)
    22bc:	00024c40 	call	24c4 <alt_printf>
  }
    22c0:	003ff406 	br	2294 <main+0x4c>

000022c4 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    22c4:	00023501 	jmpi	2350 <alt_iic_isr_register>

000022c8 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    22c8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    22cc:	00bfff84 	movi	r2,-2
    22d0:	2084703a 	and	r2,r4,r2
    22d4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    22d8:	00c00044 	movi	r3,1
    22dc:	d0a00b17 	ldw	r2,-32724(gp)
    22e0:	194a983a 	sll	r5,r3,r5
    22e4:	288ab03a 	or	r5,r5,r2
    22e8:	d1600b15 	stw	r5,-32724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    22ec:	d0a00b17 	ldw	r2,-32724(gp)
    22f0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    22f4:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    22f8:	0005883a 	mov	r2,zero
    22fc:	f800283a 	ret

00002300 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2300:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2304:	00bfff84 	movi	r2,-2
    2308:	2084703a 	and	r2,r4,r2
    230c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    2310:	00ffff84 	movi	r3,-2
    2314:	d0a00b17 	ldw	r2,-32724(gp)
    2318:	194a183a 	rol	r5,r3,r5
    231c:	288a703a 	and	r5,r5,r2
    2320:	d1600b15 	stw	r5,-32724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2324:	d0a00b17 	ldw	r2,-32724(gp)
    2328:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    232c:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    2330:	0005883a 	mov	r2,zero
    2334:	f800283a 	ret

00002338 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    2338:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    233c:	00800044 	movi	r2,1
    2340:	1144983a 	sll	r2,r2,r5
    2344:	10c4703a 	and	r2,r2,r3
}
    2348:	1004c03a 	cmpne	r2,r2,zero
    234c:	f800283a 	ret

00002350 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2350:	00c007c4 	movi	r3,31
    2354:	19401616 	blt	r3,r5,23b0 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    2358:	defffe04 	addi	sp,sp,-8
    235c:	dfc00115 	stw	ra,4(sp)
    2360:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2364:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2368:	00ffff84 	movi	r3,-2
    236c:	80c6703a 	and	r3,r16,r3
    2370:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    2374:	280490fa 	slli	r2,r5,3
    2378:	00c00034 	movhi	r3,0
    237c:	18ca2004 	addi	r3,r3,10368
    2380:	1885883a 	add	r2,r3,r2
    2384:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    2388:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    238c:	30000226 	beq	r6,zero,2398 <alt_iic_isr_register+0x48>
    2390:	00022c80 	call	22c8 <alt_ic_irq_enable>
    2394:	00000106 	br	239c <alt_iic_isr_register+0x4c>
    2398:	00023000 	call	2300 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    239c:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    23a0:	dfc00117 	ldw	ra,4(sp)
    23a4:	dc000017 	ldw	r16,0(sp)
    23a8:	dec00204 	addi	sp,sp,8
    23ac:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    23b0:	00bffa84 	movi	r2,-22
    23b4:	f800283a 	ret

000023b8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    23b8:	deffff04 	addi	sp,sp,-4
    23bc:	01000034 	movhi	r4,0
    23c0:	01400034 	movhi	r5,0
    23c4:	dfc00015 	stw	ra,0(sp)
    23c8:	210a0b04 	addi	r4,r4,10284
    23cc:	294a1204 	addi	r5,r5,10312

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    23d0:	2140061e 	bne	r4,r5,23ec <alt_load+0x34>
    23d4:	01000034 	movhi	r4,0
    23d8:	01400034 	movhi	r5,0
    23dc:	21080804 	addi	r4,r4,8224
    23e0:	29480804 	addi	r5,r5,8224
    23e4:	2140121e 	bne	r4,r5,2430 <alt_load+0x78>
    23e8:	00000b06 	br	2418 <alt_load+0x60>
    23ec:	00c00034 	movhi	r3,0
    23f0:	18ca1204 	addi	r3,r3,10312
    23f4:	1907c83a 	sub	r3,r3,r4
    23f8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    23fc:	10fff526 	beq	r2,r3,23d4 <alt_load+0x1c>
    {
      *to++ = *from++;
    2400:	114f883a 	add	r7,r2,r5
    2404:	39c00017 	ldw	r7,0(r7)
    2408:	110d883a 	add	r6,r2,r4
    240c:	10800104 	addi	r2,r2,4
    2410:	31c00015 	stw	r7,0(r6)
    2414:	003ff906 	br	23fc <alt_load+0x44>
    2418:	01000034 	movhi	r4,0
    241c:	01400034 	movhi	r5,0
    2420:	2109eb04 	addi	r4,r4,10156
    2424:	2949eb04 	addi	r5,r5,10156

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2428:	2140101e 	bne	r4,r5,246c <alt_load+0xb4>
    242c:	00000b06 	br	245c <alt_load+0xa4>
    2430:	00c00034 	movhi	r3,0
    2434:	18c86004 	addi	r3,r3,8576
    2438:	1907c83a 	sub	r3,r3,r4
    243c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2440:	10fff526 	beq	r2,r3,2418 <alt_load+0x60>
    {
      *to++ = *from++;
    2444:	114f883a 	add	r7,r2,r5
    2448:	39c00017 	ldw	r7,0(r7)
    244c:	110d883a 	add	r6,r2,r4
    2450:	10800104 	addi	r2,r2,4
    2454:	31c00015 	stw	r7,0(r6)
    2458:	003ff906 	br	2440 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    245c:	000270c0 	call	270c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    2460:	dfc00017 	ldw	ra,0(sp)
    2464:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    2468:	00027101 	jmpi	2710 <alt_icache_flush_all>
    246c:	00c00034 	movhi	r3,0
    2470:	18ca0b04 	addi	r3,r3,10284
    2474:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2478:	0005883a 	mov	r2,zero
  {
    while( to != end )
    247c:	18bff726 	beq	r3,r2,245c <alt_load+0xa4>
    {
      *to++ = *from++;
    2480:	114f883a 	add	r7,r2,r5
    2484:	39c00017 	ldw	r7,0(r7)
    2488:	110d883a 	add	r6,r2,r4
    248c:	10800104 	addi	r2,r2,4
    2490:	31c00015 	stw	r7,0(r6)
    2494:	003ff906 	br	247c <alt_load+0xc4>

00002498 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2498:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    249c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    24a0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    24a4:	00026b40 	call	26b4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    24a8:	00026d40 	call	26d4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    24ac:	d1a00c17 	ldw	r6,-32720(gp)
    24b0:	d1600d17 	ldw	r5,-32716(gp)
    24b4:	d1200e17 	ldw	r4,-32712(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    24b8:	dfc00017 	ldw	ra,0(sp)
    24bc:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    24c0:	00022481 	jmpi	2248 <main>

000024c4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    24c4:	defff204 	addi	sp,sp,-56
    24c8:	2005883a 	mov	r2,r4
    24cc:	dfc00a15 	stw	ra,40(sp)
    24d0:	df000915 	stw	fp,36(sp)
    24d4:	ddc00815 	stw	r23,32(sp)
    24d8:	dd800715 	stw	r22,28(sp)
    24dc:	dd400615 	stw	r21,24(sp)
    24e0:	dd000515 	stw	r20,20(sp)
    24e4:	dcc00415 	stw	r19,16(sp)
    24e8:	dc800315 	stw	r18,12(sp)
    24ec:	dc400215 	stw	r17,8(sp)
    24f0:	dc000115 	stw	r16,4(sp)
    24f4:	d9400b15 	stw	r5,44(sp)
    24f8:	d9800c15 	stw	r6,48(sp)
    24fc:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    2500:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
    2504:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    2508:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
    250c:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    2510:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    2514:	11000007 	ldb	r4,0(r2)
    2518:	20003a26 	beq	r4,zero,2604 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    251c:	24000226 	beq	r4,r16,2528 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    2520:	14400044 	addi	r17,r2,1
    2524:	00001406 	br	2578 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    2528:	14400084 	addi	r17,r2,2
    252c:	10800047 	ldb	r2,1(r2)
    2530:	10003426 	beq	r2,zero,2604 <alt_printf+0x140>
            {
                if (c == '%')
    2534:	1400021e 	bne	r2,r16,2540 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    2538:	8009883a 	mov	r4,r16
    253c:	00000e06 	br	2578 <alt_printf+0xb4>
                } 
                else if (c == 'c')
    2540:	1480051e 	bne	r2,r18,2558 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
    2544:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    2548:	ad800104 	addi	r22,r21,4
    254c:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
    2550:	00026340 	call	2634 <alt_putchar>
    2554:	00002906 	br	25fc <alt_printf+0x138>
                }
                else if (c == 'x')
    2558:	14c0201e 	bne	r2,r19,25dc <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    255c:	adc00017 	ldw	r23,0(r21)
    2560:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    2564:	b8000326 	beq	r23,zero,2574 <alt_printf+0xb0>
    2568:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    256c:	00c003c4 	movi	r3,15
    2570:	00000306 	br	2580 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
    2574:	01000c04 	movi	r4,48
    2578:	00026340 	call	2634 <alt_putchar>
                        continue;
    257c:	00001f06 	br	25fc <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    2580:	1d84983a 	sll	r2,r3,r22
    2584:	15c4703a 	and	r2,r2,r23
    2588:	1000021e 	bne	r2,zero,2594 <alt_printf+0xd0>
                        digit_shift -= 4;
    258c:	b5bfff04 	addi	r22,r22,-4
    2590:	003ffb06 	br	2580 <alt_printf+0xbc>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    2594:	070003c4 	movi	fp,15
                        if (digit <= 9)
    2598:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    259c:	b0001716 	blt	r22,zero,25fc <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    25a0:	e588983a 	sll	r4,fp,r22
    25a4:	25c8703a 	and	r4,r4,r23
    25a8:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
    25ac:	19000236 	bltu	r3,r4,25b8 <alt_printf+0xf4>
                            c = '0' + digit;
    25b0:	21000c04 	addi	r4,r4,48
    25b4:	00000106 	br	25bc <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
    25b8:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
    25bc:	21003fcc 	andi	r4,r4,255
    25c0:	2100201c 	xori	r4,r4,128
    25c4:	213fe004 	addi	r4,r4,-128
    25c8:	d8c00015 	stw	r3,0(sp)
    25cc:	00026340 	call	2634 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    25d0:	b5bfff04 	addi	r22,r22,-4
    25d4:	d8c00017 	ldw	r3,0(sp)
    25d8:	003ff006 	br	259c <alt_printf+0xd8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    25dc:	1500071e 	bne	r2,r20,25fc <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    25e0:	ad800017 	ldw	r22,0(r21)
    25e4:	ad400104 	addi	r21,r21,4

                    while(*s)
    25e8:	b1000007 	ldb	r4,0(r22)
    25ec:	20000326 	beq	r4,zero,25fc <alt_printf+0x138>
                      alt_putchar(*s++);
    25f0:	b5800044 	addi	r22,r22,1
    25f4:	00026340 	call	2634 <alt_putchar>
    25f8:	003ffb06 	br	25e8 <alt_printf+0x124>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    25fc:	8805883a 	mov	r2,r17
    2600:	003fc406 	br	2514 <alt_printf+0x50>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    2604:	dfc00a17 	ldw	ra,40(sp)
    2608:	df000917 	ldw	fp,36(sp)
    260c:	ddc00817 	ldw	r23,32(sp)
    2610:	dd800717 	ldw	r22,28(sp)
    2614:	dd400617 	ldw	r21,24(sp)
    2618:	dd000517 	ldw	r20,20(sp)
    261c:	dcc00417 	ldw	r19,16(sp)
    2620:	dc800317 	ldw	r18,12(sp)
    2624:	dc400217 	ldw	r17,8(sp)
    2628:	dc000117 	ldw	r16,4(sp)
    262c:	dec00e04 	addi	sp,sp,56
    2630:	f800283a 	ret

00002634 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2634:	defffd04 	addi	sp,sp,-12
    2638:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    263c:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2640:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    2644:	01000034 	movhi	r4,0
    2648:	000f883a 	mov	r7,zero
    264c:	01800044 	movi	r6,1
    2650:	d80b883a 	mov	r5,sp
    2654:	210a1104 	addi	r4,r4,10308
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2658:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    265c:	00026d80 	call	26d8 <altera_avalon_jtag_uart_write>
    2660:	00ffffc4 	movi	r3,-1
    2664:	10c00126 	beq	r2,r3,266c <alt_putchar+0x38>
        return -1;
    }
    return c;
    2668:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    266c:	dfc00217 	ldw	ra,8(sp)
    2670:	dc000117 	ldw	r16,4(sp)
    2674:	dec00304 	addi	sp,sp,12
    2678:	f800283a 	ret

0000267c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    267c:	defffe04 	addi	sp,sp,-8
    2680:	dc000015 	stw	r16,0(sp)
    2684:	dfc00115 	stw	ra,4(sp)
    2688:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    268c:	00027900 	call	2790 <strlen>
    2690:	01000034 	movhi	r4,0
    2694:	000f883a 	mov	r7,zero
    2698:	100d883a 	mov	r6,r2
    269c:	800b883a 	mov	r5,r16
    26a0:	210a1104 	addi	r4,r4,10308
#else
    return fputs(str, stdout);
#endif
#endif
}
    26a4:	dfc00117 	ldw	ra,4(sp)
    26a8:	dc000017 	ldw	r16,0(sp)
    26ac:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    26b0:	00026d81 	jmpi	26d8 <altera_avalon_jtag_uart_write>

000026b4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    26b4:	deffff04 	addi	sp,sp,-4
    26b8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    26bc:	00027880 	call	2788 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    26c0:	00800044 	movi	r2,1
    26c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    26c8:	dfc00017 	ldw	ra,0(sp)
    26cc:	dec00104 	addi	sp,sp,4
    26d0:	f800283a 	ret

000026d4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    26d4:	f800283a 	ret

000026d8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    26d8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    26dc:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    26e0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    26e4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    26e8:	2980072e 	bgeu	r5,r6,2708 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    26ec:	38c00037 	ldwio	r3,0(r7)
    26f0:	18ffffec 	andhi	r3,r3,65535
    26f4:	183ffc26 	beq	r3,zero,26e8 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    26f8:	28c00007 	ldb	r3,0(r5)
    26fc:	20c00035 	stwio	r3,0(r4)
    2700:	29400044 	addi	r5,r5,1
    2704:	003ff806 	br	26e8 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
    2708:	f800283a 	ret

0000270c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    270c:	f800283a 	ret

00002710 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2710:	f800283a 	ret

00002714 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    2714:	213ffe84 	addi	r4,r4,-6
    2718:	008003c4 	movi	r2,15
    271c:	11001636 	bltu	r2,r4,2778 <alt_exception_cause_generated_bad_addr+0x64>
    2720:	200890ba 	slli	r4,r4,2
    2724:	00800034 	movhi	r2,0
    2728:	1089ce04 	addi	r2,r2,10040
    272c:	2089883a 	add	r4,r4,r2
    2730:	20800017 	ldw	r2,0(r4)
    2734:	1000683a 	jmp	r2
    2738:	00002780 	call	278 <__alt_mem_onchip_memory2_0-0x1d88>
    273c:	00002780 	call	278 <__alt_mem_onchip_memory2_0-0x1d88>
    2740:	00002778 	rdprs	zero,zero,157
    2744:	00002778 	rdprs	zero,zero,157
    2748:	00002778 	rdprs	zero,zero,157
    274c:	00002780 	call	278 <__alt_mem_onchip_memory2_0-0x1d88>
    2750:	00002778 	rdprs	zero,zero,157
    2754:	00002778 	rdprs	zero,zero,157
    2758:	00002780 	call	278 <__alt_mem_onchip_memory2_0-0x1d88>
    275c:	00002780 	call	278 <__alt_mem_onchip_memory2_0-0x1d88>
    2760:	00002778 	rdprs	zero,zero,157
    2764:	00002780 	call	278 <__alt_mem_onchip_memory2_0-0x1d88>
    2768:	00002778 	rdprs	zero,zero,157
    276c:	00002778 	rdprs	zero,zero,157
    2770:	00002778 	rdprs	zero,zero,157
    2774:	00002780 	call	278 <__alt_mem_onchip_memory2_0-0x1d88>
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    2778:	0005883a 	mov	r2,zero
    277c:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    2780:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    2784:	f800283a 	ret

00002788 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    2788:	000170fa 	wrctl	ienable,zero
    278c:	f800283a 	ret

00002790 <strlen>:
    2790:	2005883a 	mov	r2,r4
    2794:	10c00007 	ldb	r3,0(r2)
    2798:	18000226 	beq	r3,zero,27a4 <strlen+0x14>
    279c:	10800044 	addi	r2,r2,1
    27a0:	003ffc06 	br	2794 <strlen+0x4>
    27a4:	1105c83a 	sub	r2,r2,r4
    27a8:	f800283a 	ret
